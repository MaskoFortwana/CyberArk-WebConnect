# Task ID: 1
# Title: Configure Environment Variable
# Status: done
# Dependencies: None
# Priority: high
# Description: Set up the DOTNET_BUNDLE_EXTRACT_BASE_DIR environment variable to redirect DLL extraction.
# Details:
1. Create a PowerShell script to set the environment variable:
   $env:DOTNET_BUNDLE_EXTRACT_BASE_DIR = 'C:\Program Files (x86)\CyberArk\PSM\Components\ChromeConnect'
2. Ensure the script runs before application execution in both development and production environments.
3. Add the environment variable setting to the system's environment variables for persistence.

# Test Strategy:
1. Run the script and verify the environment variable is set correctly.
2. Check if the variable persists after system restart.
3. Ensure the application can read the environment variable during runtime.

# Subtasks:
## 1. Create PowerShell Script for Environment Variable [done]
### Dependencies: None
### Description: Create a PowerShell script that sets the DOTNET_BUNDLE_EXTRACT_BASE_DIR environment variable to the specified path.
### Details:
Create a file named 'SetEnvironmentVariable.ps1' with the following content:
$env:DOTNET_BUNDLE_EXTRACT_BASE_DIR = 'C:\Program Files (x86)\CyberArk\PSM\Components\ChromeConnect'
Write-Host "Environment variable DOTNET_BUNDLE_EXTRACT_BASE_DIR set to: $env:DOTNET_BUNDLE_EXTRACT_BASE_DIR"

Ensure the script has proper error handling and verify the directory exists before setting the variable.
<info added on 2025-05-28T15:07:45.217Z>
Implementation completed successfully:

✅ Created SetEnvironmentVariable.ps1 script in scripts/ directory
✅ Script sets DOTNET_BUNDLE_EXTRACT_BASE_DIR to "C:\Program Files (x86)\CyberArk\PSM\Components\ChromeConnect"
✅ Includes error handling and validation
✅ Creates target directory if it doesn't exist
✅ Verifies the environment variable is set correctly
✅ Tests directory permissions (warns if insufficient)
✅ Tested and confirmed working - environment variable is properly set to the target path

The script successfully redirects .NET DLL extraction from user temp to the approved directory.
</info added on 2025-05-28T15:07:45.217Z>

## 2. Add Environment Variable to System Variables [done]
### Dependencies: 1.1
### Description: Add the DOTNET_BUNDLE_EXTRACT_BASE_DIR environment variable to the system's environment variables for persistence across sessions and reboots.
### Details:
Create a script that uses the [System.Environment]::SetEnvironmentVariable method to set the variable at the machine level:

[System.Environment]::SetEnvironmentVariable('DOTNET_BUNDLE_EXTRACT_BASE_DIR', 'C:\Program Files (x86)\CyberArk\PSM\Components\ChromeConnect', [System.EnvironmentVariableTarget]::Machine)

This requires administrative privileges. Include error handling for permission issues and verify the directory path exists.
<info added on 2025-05-28T15:09:12.210Z>
Implementation Status:

✅ Created SetSystemEnvironmentVariable.ps1 script in scripts/ directory
✅ Includes administrator privilege check before execution
✅ Uses [System.Environment]::SetEnvironmentVariable with Machine target for persistence
✅ Includes comprehensive error handling and validation
✅ Verifies the system environment variable is set correctly
✅ Provides helpful error messages when admin privileges are missing
✅ Also sets current session variable for immediate use
✅ Tested and confirmed proper admin check functionality

The script properly handles system-level environment variable setting with appropriate privilege checks and fallback guidance.
</info added on 2025-05-28T15:09:12.210Z>

## 3. Create Application Startup Wrapper Script [done]
### Dependencies: 1.1
### Description: Create a wrapper script that ensures the environment variable is set before launching the application in both development and production environments.
### Details:
Create a batch file or PowerShell script named 'StartApplication.ps1' that:
1. Sets the environment variable
2. Verifies it was set correctly
3. Launches the application with appropriate parameters

Example:
```
$env:DOTNET_BUNDLE_EXTRACT_BASE_DIR = 'C:\Program Files (x86)\CyberArk\PSM\Components\ChromeConnect'
if (-not $env:DOTNET_BUNDLE_EXTRACT_BASE_DIR) {
    Write-Error "Failed to set environment variable"
    exit 1
}
# Launch the application
Start-Process -FilePath "path\to\application.exe" -ArgumentList "param1", "param2"
```
<info added on 2025-05-28T15:12:07.427Z>
Implementation completed successfully:

- Created StartApplication.ps1 wrapper script in scripts/ directory
- Auto-detects ChromeConnect executable in common locations (publish/, bin/Release/, etc.)
- Allows custom application path via -ApplicationPath parameter
- Sets DOTNET_BUNDLE_EXTRACT_BASE_DIR environment variable before launch
- Creates extraction directory if it doesn't exist
- Includes comprehensive error handling and validation
- Supports command line arguments via -Arguments parameter
- Supports background (-NoWindow) and wait (-Wait) modes
- Provides detailed logging of the startup process
- Tested and confirmed working - successfully found and launched ChromeConnect.exe

The wrapper script ensures the environment variable is properly set before application launch in both development and production environments.
</info added on 2025-05-28T15:12:07.427Z>

## 4. Document and Verify Environment Configuration [done]
### Dependencies: 1.2, 1.3
### Description: Create documentation for the environment variable setup and verify the configuration works across different scenarios.
### Details:
1. Create a README.md file documenting:
   - Purpose of the DOTNET_BUNDLE_EXTRACT_BASE_DIR variable
   - Installation instructions for both development and production
   - Troubleshooting steps if DLL extraction fails
   - How to verify the configuration is working

2. Create a verification script that checks if the environment variable is set correctly and the directory exists with proper permissions.
<info added on 2025-05-28T15:16:54.808Z>
Implementation completed:

- Created comprehensive documentation in scripts/README-EnvironmentSetup.md
- Documented three setup options: session, system, and wrapper script
- Included detailed verification steps and troubleshooting guide
- Added production deployment recommendations
- Provided AppLocker configuration guidance
- Created VerifyEnvironmentSetup.ps1 verification script
- Verification script checks session/system variables, directory existence, and permissions
- Script includes detailed status reporting and next steps guidance
- Tested verification script - correctly identifies environment state
- Provides clear recommendations for completing setup

Documentation and verification tools are ready for use in both development and production environments.
</info added on 2025-05-28T15:16:54.808Z>

