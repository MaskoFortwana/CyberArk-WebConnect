# WebConnect AppLocker DLL Solution - Product Requirements Document

## Project Overview
Implement Solution 1 for resolving AppLocker DLL blocking issues in WebConnect application. The current single-file deployment extracts DLLs to user temp folders which are blocked by AppLocker policies in production environments.

## Problem Statement
- WebConnect.exe extracts DLLs to `%OSDRIVE%\USERS\USERNAME\APPDATA\LOCAL\TEMP\.NET\WEBCONNECT\` during execution
- AppLocker blocks execution of DLLs from user temp folders in production
- Need to redirect DLL extraction to approved directory: `C:\Program Files (x86)\CyberArk\PSM\Components\WebConnect\`

## Technical Requirements

### Core Implementation
1. **Environment Variable Configuration**
   - Set `DOTNET_BUNDLE_EXTRACT_BASE_DIR=C:\Program Files (x86)\CyberArk\PSM\Components\WebConnect\`
   - Ensure this is set before application execution
   - Should work for both development and production environments

2. **Publish Script Modification**
   - Update existing `publish.ps1` to include extraction directory setup
   - Implement Option A: First-run extraction simulation during build
   - Extract DLLs during publish process to capture the hash-based folder structure
   - Include extracted DLL folder in deployment package

3. **Build Process Enhancement**
   - Maintain existing single-file deployment configuration
   - Keep current `<IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>`
   - Add extraction step during publish to pre-generate DLL folder
   - Package both .exe and extracted DLLs for deployment

4. **Directory Structure Management**
   - Create target directory if it doesn't exist
   - Handle hash-based subdirectory creation (e.g., `BUVKQZGVGMYJUEVNC62UH0NUC1GYHEG=`)
   - Ensure proper permissions for extraction directory
   - Clean up old extraction folders if needed

### Deployment Integration
1. **PowerShell Script Updates**
   - Modify publish script to run extraction simulation
   - Copy extracted DLL structure to deployment package
   - Ensure environment variable is set before execution
   - Add validation steps to verify extraction works

2. **Testing Requirements**
   - Test build process without breaking existing functionality
   - Verify DLL extraction works to custom directory
   - Ensure application still functions correctly
   - Test on clean machine without pre-existing temp extractions

## Constraints
- **DO NOT** change core application functionality
- **DO NOT** modify Selenium dependencies or usage
- **DO NOT** test against real websites
- **DO NOT** change existing .csproj configuration beyond what's necessary
- **DO NOT** break existing publish workflow
- Test only up to successful build and extraction

## Success Criteria
1. DLLs extract to `C:\Program Files (x86)\CyberArk\PSM\Components\WebConnect\` instead of user temp
2. Application builds and publishes successfully
3. Extracted DLL folder is included in deployment package
4. Environment variable configuration works correctly
5. Existing functionality remains unchanged
6. Build process completes without errors

## Technical Stack
- .NET 8 single-file deployment
- PowerShell build scripts
- Windows AppLocker environment
- CyberArk PSM Components integration

## Deliverables
1. Updated `publish.ps1` script with extraction logic
2. Environment variable configuration
3. Pre-extracted DLL folder structure in deployment
4. Documentation for deployment process
5. Validation that build process works correctly
